{"index.html": {"url": "index.html", "title": "介绍", "keywords": "", "body": "Android相关我只是搬运工，如果文中有冒犯到您的地方，请告知我删除内容，或添加来源。"}, "md/adb.html": {"url": "md/adb.html", "title": "ADB", "keywords": "", "body": "ADB官方文档Android调试桥(adb)是一种功能多样的命令行工具，可让您与设备进行通信。adb命令可用于执行各种设备操作（例如安装和调试应用），并提供对Unixshell（可用来在设备上运行各种命令）的访问权限。它是一种客户端-服务器程序，包括以下三个组件：客户端：用于发送命令。客户端在开发计算机上运行。您可以通过发出adb命令来从命令行终端调用客户端。守护进程(adbd)：在设备上运行命令。守护进程在每个设备上作为后台进程运行。服务器：管理客户端和守护进程之间的通信。服务器在开发机器上作为后台进程运行。可以在android_sdk/platform-tools/中找到adb工具。建议将该路径加入PATH环境变量中1.adb的工作原理当你启动一个adb客户端，客户端首先确认是否已有一个adb服务进程在运行。如果没有，则启动服务进程。当服务器运行，adb服务器就会绑定本地的TCP端口5037并监听adb客户端发来的命令，所有的adb客户端都是用端口5037与adb服务器通信。然后，服务器将所有运行中的模拟器或设备实例建立连接。它通过扫描所有5555到5585范围内（该范围供前16个模拟器使用）的奇数端口来定位所有的模拟器或设备。一旦服务器找到了adb守护程序(adbd)，它将建立一个到该端口的连接。请注意，任何模拟器或设备实例会取得两个连续的端口——一个偶数端口用来响应控制台的连接，和一个奇数端口用来响应adb连接。比如说：模拟器1，控制台：5554模拟器1，adb：5555模拟器2，控制台：5556模拟器2，adb：5557以此类推...如上所示，模拟器实例通过5555端口连接adb，就如同使用5554端口连接控制台一样。一旦服务器与所有模拟器实例建立连接，就可以使用adb命令控制和访问该实例。因为服务器管理模拟器/设备实例的连接，和控制处理从来自多个adb客户端来的命令，你可以通过任何客户端（或脚本）来控制任何模拟器或设备实例。2.在你的设备上启用adb调试要在通过USB连接的设备上使用adb，必须在设备系统设置中启用USB调试（位于开发者选项下）。在运行Android4.2及更高版本的设备上，开发者选项屏幕默认情况下处于隐藏状态。如需将其显示出来，请转到设置&gt;关于手机并点按软件版本号七次。返回上一屏幕，在底部可以找到开发者选项。在某些设备上，开发者选项屏幕所在的位置或命名方式可能有所不同。现在，可以将设备与USB连接。可以从命令行执行adbdevices来验证设备是否连接。注：当连接运行Android4.2.2或更高版本的设备时，系统将显示一个对话框，询问你是否接受允许在这台计算机上调试的RSA密钥。这种安全机制可以保护用户设备，因为它可以确保只有在你能够解锁设备并确认对话框的情况下才能执行USB调试和其他ADB命令。2.1.USB连接通过USB连接来正常使用adb需要保证几点：硬件状态正常。包括Android设备处于正常开机状态，USB连接线和各种接口完好。Android设备的开发者选项和USB调试模式已开启。可以到设置-开发者选项-Android调试查看。如果在设置里找不到开发者选项，那需要通过一个彩蛋来让它显示出来：在设置-关于手机连续点击版本号7次。设备驱动状态正常。这一点貌似在Linux和MacOSX下不用操心，在Windows下有可能遇到需要安装驱动的情况，确认这一点可以右键计算机-属性，到设备管理器里查看相关设备上是否有黄色感叹号或问号，如果没有就说明驱动状态已经好了。否则可以下载一个手机助手类程序来安装驱动先。通过USB线连接好电脑和设备后确认状态。adbdevices如果能看到xxxxxxdevice说明连接成功。2.2.无线连接（需要借助USB线）除了可以通过USB连接设备与电脑来使用adb，也可以通过无线连接——虽然连接过程中也有需要使用USB的步骤，但是连接成功之后你的设备就可以在一定范围内摆脱USB连接线的限制啦！操作步骤：将Android设备与要运行adb的电脑连接到同一个局域网，比如连到同一个WiFi。将设备与电脑通过USB线连接。应确保连接成功（可运行adbdevices看是否能列出该设备）。让设备在5555端口监听TCP/IP连接：adbtcpip5555断开USB连接。找到设备的IP地址。一般能在设置-关于手机-状态信息-IP地址找到，也可以使用下文里查看设备信息-IP地址一节里的方法用adb命令来查看。通过IP地址连接设备。adbconnect&lt;device-ip-address&gt;这里的&lt;device-ip-address&gt;就是上一步中找到的设备IP地址。确认连接状态。adbdevices如果能看到&lt;device-ip-address&gt;:5555device说明连接成功。如果连接不了，请确认Android设备与电脑是连接到了同一个WiFi，然后再次执行adbconnect&lt;device-ip-address&gt;那一步；如果还是不行的话，通过adbkill-server重新启动adb然后从头再来一次试试。断开无线连接命令：adbdisconnect&lt;device-ip-address&gt;3.基本用法3.1.命令语法adb命令的基本语法如下：adb[-d|-e|-s&lt;serialNumber&gt;]&lt;command&gt;如果只有一个设备/模拟器连接时，可以省略掉[-d|-e|-s&lt;serialNumber&gt;]这一部分，直接使用adb&lt;command&gt;。3.2.为命令指定目标设备如果有多个设备/模拟器连接，则需要为命令指定目标设备。参数含义-d指定当前唯一通过USB连接的Android设备为命令目标-e指定当前唯一运行的模拟器为命令目标-s&lt;serialNumber&gt;指定相应serialNumber号的设备/模拟器为命令目标在多个设备/模拟器连接的情况下较常用的是-s&lt;serialNumber&gt;参数，serialNumber可以通过adbdevices命令获取。如：&gt;adbdevicesListofdevicesattachedcf264b8fdeviceemulator-5554device10.129.164.6:5555device输出里的cf264b8f、emulator-5554和10.129.164.6:5555即为serialNumber。比如这时想指定cf264b8f这个设备来运行adb命令获取屏幕分辨率：adb-scf264b8fshellwmsize又如想给10.129.164.6:5555这个设备安装应用（这种形式的serialNumber格式为&lt;IP&gt;:&lt;Port&gt;，一般为无线连接的设备或Genymotion等第三方Android模拟器）：adb-s10.129.164.6:5555installtest.apk遇到多设备/模拟器的情况均使用这几个参数为命令指定目标设备，下文中为简化描述，不再重复。3.3.启动/停止启动adbserver命令：adbstart-server（一般无需手动执行此命令，在运行adb命令时若发现adbserver没有启动会自动调起。）停止adbserver命令：adbkill-server3.4.查看adb版本命令：adbversion示例输出：AndroidDebugBridgeversion1.0.36Revision8f855a3d9b35-android3.5.以root权限运行adbadb的运行原理是PC端的adbserver与手机端的守护进程adb建立连接，然后PC端的adbclient通过adbserver转发命令，adb接收命令后解析运行。所以如果adb以普通权限执行，有些需要root权限才能执行的命令无法直接用adbxxx执行。这时可以adbshell然后su后执行命令，也可以让adb以root权限执行，这个就能随意执行高权限命令了。命令：adbroot正常输出：restartingadbasroot现在再运行adbshell，看看命令行提示符是不是变成#了？有些手机root后也无法通过adbroot命令让adb以root权限执行，比如三星的部分机型，会提示adbcannotrunasrootinproductionbuilds，此时可以先安装adbInsecure，然后adbroot试试。相应地，如果要恢复adb为非root权限的话，可以使用adbunroot命令。3.6.指定adbserver的网络端口命令：adb-P&lt;port&gt;start-server默认端口为5037。4.设备连接管理4.1.查询已连接设备/模拟器命令：adbdevices[-l]参数显示列表-l如果包含-l选项，则devices命令会告知你设备是什么。当您连接了多个设备时，此信息很有用，可帮助您将它们区分开来。输出示例：Listofdevicesattachedcf264b8fdeviceemulator-5554device10.129.164.6:5555device输出格式为[serialNumber][state]，serialNumber即我们常说的SN，state有如下几种：offline表示设备未连接成功或无响应。device设备已连接。注意这个状态并不能标识Android系统已经完全启动和可操作，在设备启动过程中设备实例就可连接到adb，但启动完毕后系统才处于可操作状态。nodevice没有设备/模拟器连接。以上输出显示当前已经连接了三台设备/模拟器，cf264b8f、emulator-5554和10.129.164.6:5555分别是它们的SN。从emulator-5554这个名字可以看出它是一个Android模拟器，而10.129.164.6:5555这种形为&lt;IP&gt;:&lt;Port&gt;的serialNumber一般是无线连接的设备或Genymotion等第三方Android模拟器。常见异常输出：没有设备/模拟器连接成功。Listofdevicesattached设备/模拟器未连接到adb或无响应。Listofdevicesattachedcf264b8foffline5.应用管理5.1.查看应用列表查看应用列表的基本命令格式是adbshellpmlistpackages[-f][-d][-e][-s][-3][-i][-u][--userUSER_ID][FILTER]即在adbshellpmlistpackages的基础上可以加一些参数进行过滤查看不同的列表，支持的过滤参数如下：参数显示列表无所有应用-f显示应用关联的apk文件-d只显示disabled的应用-e只显示enabled的应用-s只显示系统应用-3只显示第三方应用-i显示应用的installer-u包含已卸载应用&lt;FILTER&gt;包名包含&lt;FILTER&gt;字符串5.1.1.所有应用命令：adbshellpmlistpackages输出示例：package:com.android.smoketestpackage:com.example.android.livecubespackage:com.android.providers.telephonypackage:com.google.android.googlequicksearchboxpackage:com.android.providers.calendarpackage:com.android.providers.mediapackage:com.android.protipspackage:com.android.documentsuipackage:com.android.gallerypackage:com.android.externalstorage...//otherpackageshere...5.1.2.系统应用命令：adbshellpmlistpackages-s5.1.3.第三方应用命令：adbshellpmlistpackages-35.1.4.包名包含某字符串的应用比如要查看包名包含字符串mazhuang的应用列表，命令：adbshellpmlistpackagesmazhuang当然也可以使用grep来过滤：adbshellpmlistpackages|grepmazhuang5.2.安装APK命令格式：adbinstall[-lrtsdg]&lt;path_to_apk&gt;参数：adbinstall后面可以跟一些可选参数来控制安装APK的行为，可用参数及含义如下：参数含义-l将应用安装到保护目录/mnt/asec-r允许覆盖安装-t允许安装AndroidManifest.xml里application指定android:testOnly=&quot;true&quot;的应用-s将应用安装到sdcard-d允许降级覆盖安装-g授予所有运行时权限运行命令后如果见到类似如下输出（状态为Success）代表安装成功：[100%]/data/local/tmp/1.apkpkg:/data/local/tmp/1.apkSuccess上面是当前最新版v1.0.36的adb的输出，会显示pushapk文件到手机的进度百分比。使用旧版本adb的输出则是这样的：12040KB/s(22205609bytesin1.801s)pkg:/data/local/tmp/SogouInput_android_v8.3_sweb.apkSuccess而如果状态为Failure则表示安装失败，比如：[100%]/data/local/tmp/map-20160831.apkpkg:/data/local/tmp/map-20160831.apkFailure[INSTALL_FAILED_ALREADY_EXISTS]常见安装失败输出代码、含义及可能的解决办法如下：输出含义解决办法INSTALL_FAILED_ALREADY_EXISTS应用已经存在，或卸载了但没卸载干净adbinstall时使用-r参数，或者先adbuninstall&lt;packagename&gt;再安装INSTALL_FAILED_INVALID_APK无效的APK文件INSTALL_FAILED_INVALID_URI无效的APK文件名确保APK文件名里无中文INSTALL_FAILED_INSUFFICIENT_STORAGE空间不足清理空间INSTALL_FAILED_DUPLICATE_PACKAGE已经存在同名程序INSTALL_FAILED_NO_SHARED_USER请求的共享用户不存在INSTALL_FAILED_UPDATE_INCOMPATIBLE以前安装过同名应用，但卸载时数据没有移除；或者已安装该应用，但签名不一致先adbuninstall&lt;packagename&gt;再安装INSTALL_FAILED_SHARED_USER_INCOMPATIBLE请求的共享用户存在但签名不一致INSTALL_FAILED_MISSING_SHARED_LIBRARY安装包使用了设备上不可用的共享库INSTALL_FAILED_REPLACE_COULDNT_DELETE替换时无法删除INSTALL_FAILED_DEXOPTdex优化验证失败或空间不足INSTALL_FAILED_OLDER_SDK设备系统版本低于应用要求INSTALL_FAILED_CONFLICTING_PROVIDER设备里已经存在与应用里同名的contentproviderINSTALL_FAILED_NEWER_SDK设备系统版本高于应用要求INSTALL_FAILED_TEST_ONLY应用是test-only的，但安装时没有指定-t参数INSTALL_FAILED_CPU_ABI_INCOMPATIBLE包含不兼容设备CPU应用程序二进制接口的nativecodeINSTALL_FAILED_MISSING_FEATURE应用使用了设备不可用的功能INSTALL_FAILED_CONTAINER_ERROR1.sdcard访问失败；2.应用签名与ROM签名一致，被当作内置应用。1.确认sdcard可用，或者安装到内置存储；2.打包时不与ROM使用相同签名。INSTALL_FAILED_INVALID_INSTALL_LOCATION1.不能安装到指定位置；2.应用签名与ROM签名一致，被当作内置应用。1.切换安装位置，添加或删除-s参数；2.打包时不与ROM使用相同签名。INSTALL_FAILED_MEDIA_UNAVAILABLE安装位置不可用一般为sdcard，确认sdcard可用或安装到内置存储INSTALL_FAILED_VERIFICATION_TIMEOUT验证安装包超时INSTALL_FAILED_VERIFICATION_FAILURE验证安装包失败INSTALL_FAILED_PACKAGE_CHANGED应用与调用程序期望的不一致INSTALL_FAILED_UID_CHANGED以前安装过该应用，与本次分配的UID不一致清除以前安装过的残留文件INSTALL_FAILED_VERSION_DOWNGRADE已经安装了该应用更高版本使用-d参数INSTALL_FAILED_PERMISSION_MODEL_DOWNGRADE已安装targetSDK支持运行时权限的同名应用，要安装的版本不支持运行时权限INSTALL_PARSE_FAILED_NOT_APK指定路径不是文件，或不是以.apk结尾INSTALL_PARSE_FAILED_BAD_MANIFEST无法解析的AndroidManifest.xml文件INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION解析器遇到异常INSTALL_PARSE_FAILED_NO_CERTIFICATES安装包没有签名INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES已安装该应用，且签名与APK文件不一致先卸载设备上的该应用，再安装INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING解析APK文件时遇到CertificateEncodingExceptionINSTALL_PARSE_FAILED_BAD_PACKAGE_NAMEmanifest文件里没有或者使用了无效的包名INSTALL_PARSE_FAILED_BAD_SHARED_USER_IDmanifest文件里指定了无效的共享用户IDINSTALL_PARSE_FAILED_MANIFEST_MALFORMED解析manifest文件时遇到结构性错误INSTALL_PARSE_FAILED_MANIFEST_EMPTY在manifest文件里找不到找可操作标签（instrumentation或application）INSTALL_FAILED_INTERNAL_ERROR因系统问题安装失败INSTALL_FAILED_USER_RESTRICTED用户被限制安装应用在开发者选项里将「USB安装」打开，如果已经打开了，那先关闭再打开。INSTALL_FAILED_DUPLICATE_PERMISSION应用尝试定义一个已经存在的权限名称INSTALL_FAILED_NO_MATCHING_ABIS应用包含设备的应用程序二进制接口不支持的nativecodeINSTALL_CANCELED_BY_USER应用安装需要在设备上确认，但未操作设备或点了取消在设备上同意安装INSTALL_FAILED_ACWF_INCOMPATIBLE应用程序与设备不兼容INSTALL_FAILED_TEST_ONLYAPK文件是使用AndroidStudio直接RUN编译出来的文件通过Gradle的assembleDebug或assembleRelease重新编译，或者GenerateSignedAPKdoesnotcontainAndroidManifest.xml无效的APK文件isnotavalidzipfile无效的APK文件Offline设备未连接成功先将设备与adb连接成功unauthorized设备未授权允许调试error:devicenotfound没有连接成功的设备先将设备与adb连接成功protocolfailure设备已断开连接先将设备与adb连接成功Unknownoption:-sAndroid2.2以下不支持安装到sdcard不使用-s参数Nospaceleftondevice空间不足清理空间Permissiondenied...sdcard...sdcard不可用signaturesdonotmatchthepreviouslyinstalledversion;ignoring!已安装该应用且签名不一致先卸载设备上的该应用，再安装参考：PackageManager.java*adbinstall内部原理简介*adbinstall实际是分三步完成：pushapk文件到/data/local/tmp。调用pminstall安装。删除/data/local/tmp下的对应apk文件。所以，必要的时候也可以根据这个步骤，手动分步执行安装过程。5.3.卸载应用命令：adbuninstall[-k]&lt;packagename&gt;&lt;packagename&gt;表示应用的包名，-k参数可选，表示卸载应用但保留数据和缓存目录。命令示例：adbuninstallcom.qihoo360.mobilesafe表示卸载360手机卫士。5.4.清除应用数据与缓存命令：adbshellpmclear&lt;packagename&gt;&lt;packagename&gt;表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据」。命令示例：adbshellpmclearcom.qihoo360.mobilesafe表示清除360手机卫士的数据和缓存。5.5.查看前台Activity命令：adbshelldumpsysactivityactivities|grepmFocusedActivity输出示例：mFocusedActivity:ActivityRecord{8079d7eu0com.cyanogenmod.trebuchet/com.android.launcher3.Launchert42}其中的com.cyanogenmod.trebuchet/com.android.launcher3.Launcher就是当前处于前台的Activity。5.6.查看正在运行的Services命令：adbshelldumpsysactivityservices[&lt;packagename&gt;]&lt;packagename&gt;参数不是必须的，指定&lt;packagename&gt;表示查看与某个包名相关的Services，不指定表示查看所有Services。&lt;packagename&gt;不一定要给出完整的包名，比如运行adbshelldumpsysactivityservicesorg.mazhuang，那么包名org.mazhuang.demo1、org.mazhuang.demo2和org.mazhuang123等相关的Services都会列出来。5.7.查看应用详细信息命令：adbshelldumpsyspackage&lt;packagename&gt;输出中包含很多信息，包括ActivityResolverTable、RegisteredContentProviders、包名、userId、安装后的文件资源代码等路径、版本信息、权限信息和授予状态、签名版本信息等。&lt;packagename&gt;表示应用包名。输出示例：ActivityResolverTable:Non-DataActions:android.intent.action.MAIN:5b4cba8org.mazhuang.guanggoo/.SplashActivityfilter5ec9dccAction:&quot;android.intent.action.MAIN&quot;Category:&quot;android.intent.category.LAUNCHER&quot;AutoVerify=falseRegisteredContentProviders:org.mazhuang.guanggoo/com.tencent.bugly.beta.utils.BuglyFileProvider:Provider{7a3c394org.mazhuang.guanggoo/com.tencent.bugly.beta.utils.BuglyFileProvider}ContentProviderAuthorities:[org.mazhuang.guanggoo.fileProvider]:Provider{7a3c394org.mazhuang.guanggoo/com.tencent.bugly.beta.utils.BuglyFileProvider}applicationInfo=ApplicationInfo{7754242org.mazhuang.guanggoo}KeySetManager:[org.mazhuang.guanggoo]SigningKeySets:501Packages:Package[org.mazhuang.guanggoo](c1d7f):userId=10394pkg=Package{55f714corg.mazhuang.guanggoo}codePath=/data/app/org.mazhuang.guanggoo-2resourcePath=/data/app/org.mazhuang.guanggoo-2legacyNativeLibraryDir=/data/app/org.mazhuang.guanggoo-2/libprimaryCpuAbi=nullsecondaryCpuAbi=nullversionCode=74minSdk=15targetSdk=25versionName=1.1.74splits=[base]apkSigningVersion=2applicationInfo=ApplicationInfo{7754242org.mazhuang.guanggoo}flags=[HAS_CODEALLOW_CLEAR_USER_DATAALLOW_BACKUP]privateFlags=[RESIZEABLE_ACTIVITIES]dataDir=/data/user/0/org.mazhuang.guanggoosupportsScreens=[small,medium,large,xlarge,resizeable,anyDensity]timeStamp=2017-10-2223:50:53firstInstallTime=2017-10-2223:50:25lastUpdateTime=2017-10-2223:50:55installerPackageName=com.miui.packageinstallersignatures=PackageSignatures{af09595[53c7caa2]}installPermissionsFixed=trueinstallStatus=1pkgFlags=[HAS_CODEALLOW_CLEAR_USER_DATAALLOW_BACKUP]requestedpermissions:android.permission.READ_PHONE_STATEandroid.permission.INTERNETandroid.permission.ACCESS_NETWORK_STATEandroid.permission.ACCESS_WIFI_STATEandroid.permission.READ_LOGSandroid.permission.WRITE_EXTERNAL_STORAGEandroid.permission.READ_EXTERNAL_STORAGEinstallpermissions:android.permission.INTERNET:granted=trueandroid.permission.ACCESS_NETWORK_STATE:granted=trueandroid.permission.ACCESS_WIFI_STATE:granted=trueUser0:ceDataInode=1155675installed=truehidden=falsesuspended=falsestopped=truenotLaunched=falseenabled=0gids=[3003]runtimepermissions:android.permission.READ_EXTERNAL_STORAGE:granted=trueandroid.permission.READ_PHONE_STATE:granted=trueandroid.permission.WRITE_EXTERNAL_STORAGE:granted=trueUser999:ceDataInode=0installed=falsehidden=falsesuspended=falsestopped=truenotLaunched=trueenabled=0gids=[3003]runtimepermissions:Dexoptstate:[org.mazhuang.guanggoo]InstructionSet:arm64path:/data/app/org.mazhuang.guanggoo-2/base.apkstatus:/data/app/org.mazhuang.guanggoo-2/oat/arm64/base.odex[compilation_filter=speed-profile,status=kOatUpToDate]5.8.查看应用安装路径命令：adbshellpmpath&lt;PACKAGE&gt;输出应用安装路径输出示例：adbshellpmpathecarx.weatherpackage:/data/app/ecarx.weather-1.apk6.与应用交互主要是使用am&lt;command&gt;命令，常用的&lt;command&gt;如下：command用途start[options]&lt;INTENT&gt;启动&lt;INTENT&gt;指定的Activitystartservice[options]&lt;INTENT&gt;启动&lt;INTENT&gt;指定的Servicebroadcast[options]&lt;INTENT&gt;发送&lt;INTENT&gt;指定的广播force-stop&lt;packagename&gt;停止&lt;packagename&gt;相关的进程&lt;INTENT&gt;参数很灵活，和写Android程序时代码里的Intent相对应。用于决定intent对象的选项如下：参数含义-a&lt;ACTION&gt;指定action，比如android.intent.action.VIEW-c&lt;CATEGORY&gt;指定category，比如android.intent.category.APP_CONTACTS-n&lt;COMPONENT&gt;指定完整component名，用于明确指定启动哪个Activity，如com.example.app/.ExampleActivity&lt;INTENT&gt;里还能带数据，就像写代码时的Bundle一样：参数含义--esn&lt;EXTRA_KEY&gt;null值（只有key名）`-e--es&lt;EXTRA_KEY&gt;&lt;EXTRA_STRING_VALUE&gt;`string值--ez&lt;EXTRA_KEY&gt;&lt;EXTRA_BOOLEAN_VALUE&gt;boolean值--ei&lt;EXTRA_KEY&gt;&lt;EXTRA_INT_VALUE&gt;integer值--el&lt;EXTRA_KEY&gt;&lt;EXTRA_LONG_VALUE&gt;long值--ef&lt;EXTRA_KEY&gt;&lt;EXTRA_FLOAT_VALUE&gt;float值--eu&lt;EXTRA_KEY&gt;&lt;EXTRA_URI_VALUE&gt;URI--ecn&lt;EXTRA_KEY&gt;&lt;EXTRA_COMPONENT_NAME_VALUE&gt;componentname--eia&lt;EXTRA_KEY&gt;&lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]integer数组--ela&lt;EXTRA_KEY&gt;&lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]long数组6.1.启动应用/调起Activity命令格式：adbshellamstart[options]&lt;INTENT&gt;例如：adbshellamstart-ncom.tencent.mm/.ui.LauncherUI表示调起微信主界面。adbshellamstart-norg.mazhuang.boottimemeasure/.MainActivity--es&quot;toast&quot;&quot;hello,world&quot;表示调起org.mazhuang.boottimemeasure/.MainActivity并传给它string数据键值对toast-hello,world。6.2.调起Service命令格式：adbshellamstartservice[options]&lt;INTENT&gt;例如：adbshellamstartservice-ncom.tencent.mm/.plugin.accountsync.model.AccountAuthenticatorService表示调起微信的某Service。另外一个典型的用例是如果设备上原本应该显示虚拟按键但是没有显示，可以试试这个：adbshellamstartservice-ncom.android.systemui/.SystemUIService6.3.停止Service命令格式：adbshellamstopservice[options]&lt;INTENT&gt;6.4.发送广播命令格式：adbshellambroadcast[options]&lt;INTENT&gt;可以向所有组件广播，也可以只向指定组件广播。例如，向所有组件广播BOOT_COMPLETED：adbshellambroadcast-aandroid.intent.action.BOOT_COMPLETED又例如，只向org.mazhuang.boottimemeasure/.BootCompletedReceiver广播BOOT_COMPLETED：adbshellambroadcast-aandroid.intent.action.BOOT_COMPLETED-norg.mazhuang.boottimemeasure/.BootCompletedReceiver这类用法在测试的时候很实用，比如某个广播的场景很难制造，可以考虑通过这种方式来发送广播。既能发送系统预定义的广播，也能发送自定义广播。如下是部分系统预定义广播及正常触发时机：action触发时机android.net.conn.CONNECTIVITY_CHANGE网络连接发生变化android.intent.action.SCREEN_ON屏幕点亮android.intent.action.SCREEN_OFF屏幕熄灭android.intent.action.BATTERY_LOW电量低，会弹出电量低提示框android.intent.action.BATTERY_OKAY电量恢复了android.intent.action.BOOT_COMPLETED设备启动完毕android.intent.action.DEVICE_STORAGE_LOW存储空间过低android.intent.action.DEVICE_STORAGE_OK存储空间恢复android.intent.action.PACKAGE_ADDED安装了新的应用android.net.wifi.STATE_CHANGEWiFi连接状态发生变化android.net.wifi.WIFI_STATE_CHANGEDWiFi状态变为启用/关闭/正在启动/正在关闭/未知android.intent.action.BATTERY_CHANGED电池电量发生变化android.intent.action.INPUT_METHOD_CHANGED系统输入法发生变化android.intent.action.ACTION_POWER_CONNECTED外部电源连接android.intent.action.ACTION_POWER_DISCONNECTED外部电源断开连接android.intent.action.DREAMING_STARTED系统开始休眠android.intent.action.DREAMING_STOPPED系统停止休眠android.intent.action.WALLPAPER_CHANGED壁纸发生变化android.intent.action.HEADSET_PLUG插入耳机android.intent.action.MEDIA_UNMOUNTED卸载外部介质android.intent.action.MEDIA_MOUNTED挂载外部介质android.os.action.POWER_SAVE_MODE_CHANGED省电模式开启（以上广播均可使用adb触发）6.5.强制停止应用命令：adbshellamforce-stop&lt;packagename&gt;命令示例：adbshellamforce-stopcom.qihoo360.mobilesafe表示停止360安全卫士的一切进程与服务。6.6.收紧内存命令：adbshellamsend-trim-memory&lt;pid&gt;&lt;level&gt;pid:进程IDlevel:HIDDEN、RUNNING_MODERATE、BACKGROUND、RUNNING_LOW、MODERATE、RUNNING_CRITICAL、COMPLETE命令示例：adbshellamsend-trim-memory12345RUNNING_LOW表示向pid=12345的进程，发出level=RUNNING_LOW的收紧内存命令。7.文件管理7.1.复制设备里的文件到电脑命令：adbpull&lt;设备里的文件路径&gt;[电脑上的目录]其中电脑上的目录参数可以省略，默认复制到当前目录。例：adbpull/sdcard/sr.mp4~/tmp/小技巧：设备上的文件路径可能需要root权限才能访问，如果你的设备已经root过，可以先使用adbshell和su命令在adbshell里获取root权限后，先cp/path/on/device/sdcard/filename将文件复制到sdcard，然后adbpull/sdcard/filename/path/on/pc。7.2.复制电脑里的文件到设备命令：adbpush&lt;电脑上的文件路径&gt;&lt;设备里的目录&gt;例：adbpush~/sr.mp4/sdcard/小技巧：设备上的文件路径普通权限可能无法直接写入，如果你的设备已经root过，可以先adbpush/path/on/pc/sdcard/filename，然后adbshell和su在adbshell里获取root权限后，cp/sdcard/filename/path/on/device。8.模拟按键/输入在adbshell里有个很实用的命令叫input，通过它可以做一些有趣的事情。input命令的完整help信息如下：Usage:input[&lt;source&gt;]&lt;command&gt;[&lt;arg&gt;...]Thesourcesare:mousekeyboardjoysticktouchnavigationtouchpadtrackballstylusdpadgesturetouchscreengamepadThecommandsanddefaultsourcesare:text&lt;string&gt;(Default:touchscreen)keyevent[--longpress]&lt;keycodenumberorname&gt;...(Default:keyboard)tap&lt;x&gt;&lt;y&gt;(Default:touchscreen)swipe&lt;x1&gt;&lt;y1&gt;&lt;x2&gt;&lt;y2&gt;[duration(ms)](Default:touchscreen)press(Default:trackball)roll&lt;dx&gt;&lt;dy&gt;(Default:trackball)比如使用adbshellinputkeyevent&lt;keycode&gt;命令，不同的keycode能实现不同的功能，完整的keycode列表详见KeyEvent，摘引部分我觉得有意思的如下：keycode含义3HOME键4返回键5打开拨号应用6挂断电话24增加音量25降低音量26电源键27拍照（需要在相机应用里）64打开浏览器82菜单键85播放/暂停86停止播放87播放下一首88播放上一首122移动光标到行首或列表顶部123移动光标到行末或列表底部126恢复播放127暂停播放164静音176打开系统设置187切换应用207打开联系人208打开日历209打开音乐210打开计算器220降低屏幕亮度221提高屏幕亮度223系统休眠224点亮屏幕231打开语音助手276如果没有wakelock则让系统休眠下面是input命令的一些用法举例。8.1.电源键命令：adbshellinputkeyevent26执行效果相当于按电源键。8.2.菜单键命令：adbshellinputkeyevent828.3.HOME键命令：adbshellinputkeyevent38.4.返回键命令：adbshellinputkeyevent48.5.音量控制增加音量：adbshellinputkeyevent24降低音量：adbshellinputkeyevent25静音：adbshellinputkeyevent1648.6.媒体控制播放/暂停：adbshellinputkeyevent85停止播放：adbshellinputkeyevent86播放下一首：adbshellinputkeyevent87播放上一首：adbshellinputkeyevent88恢复播放：adbshellinputkeyevent126暂停播放：adbshellinputkeyevent1278.7.点亮/熄灭屏幕可以通过上文讲述过的模拟电源键来切换点亮和熄灭屏幕，但如果明确地想要点亮或者熄灭屏幕，那可以使用如下方法。点亮屏幕：adbshellinputkeyevent224熄灭屏幕：adbshellinputkeyevent2238.8.滑动解锁如果锁屏没有密码，是通过滑动手势解锁，那么可以通过inputswipe来解锁。命令（参数以机型Nexus5，向上滑动手势解锁举例）：adbshellinputswipe3001000300500参数3001000300500分别表示起始点x坐标起始点y坐标结束点x坐标结束点y坐标。8.9.输入文本在焦点处于某文本框时，可以通过input命令来输入文本。命令：adbshellinputtexthello现在hello出现在文本框了。9.查看日志Android系统的日志分为两部分，底层的Linux内核日志输出到/proc/kmsg，Android的日志输出到/dev/log。9.1.Android日志命令格式：[adb]logcat[&lt;option&gt;]...[&lt;filter-spec&gt;]...常用用法列举如下：9.1.1.按级别过滤日志Android的日志分为如下几个优先级（priority）：V——Verbose（最低，输出得最多）D——DebugI——InfoW——WarningE——ErrorF——FatalS——Silent（最高，啥也不输出）按某级别过滤日志则会将该级别及以上的日志输出。比如，命令：adblogcat*:W会将Warning、Error、Fatal和Silent日志输出。（注：在macOS下需要给*:W这样以*作为tag的参数加双引号，如adblogcat&quot;*:W&quot;，不然会报错nomatchesfound:*:W。）9.1.2.按tag和级别过滤日志&lt;filter-spec&gt;可以由多个&lt;tag&gt;[:priority]组成。比如，命令：adblogcatActivityManager:IMyApp:D*:S表示输出tagActivityManager的Info以上级别日志，输出tagMyApp的Debug以上级别日志，及其它tag的Silent级别日志（即屏蔽其它tag日志）。9.1.3.日志格式可以用adblogcat-v&lt;format&gt;选项指定日志输出格式。日志支持按以下几种&lt;format&gt;：brief默认格式。格式为：&lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;):&lt;message&gt;示例：D/HeadsetStateMachine(1785):Disconnectedprocessmessage:10,size:0process格式为：&lt;priority&gt;(&lt;pid&gt;)&lt;message&gt;示例：D(1785)Disconnectedprocessmessage:10,size:0(HeadsetStateMachine)tag格式为：&lt;priority&gt;/&lt;tag&gt;:&lt;message&gt;示例：D/HeadsetStateMachine:Disconnectedprocessmessage:10,size:0raw格式为：&lt;message&gt;示例：Disconnectedprocessmessage:10,size:0time格式为：&lt;datetime&gt;&lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;):&lt;message&gt;示例：08-2822:39:39.974D/HeadsetStateMachine(1785):Disconnectedprocessmessage:10,size:0threadtime格式为：&lt;datetime&gt;&lt;pid&gt;&lt;tid&gt;&lt;priority&gt;&lt;tag&gt;:&lt;message&gt;示例：08-2822:39:39.97417851832DHeadsetStateMachine:Disconnectedprocessmessage:10,size:0long格式为：[&lt;datetime&gt;&lt;pid&gt;:&lt;tid&gt;&lt;priority&gt;/&lt;tag&gt;]&lt;message&gt;示例：[08-2822:39:39.9741785:1832D/HeadsetStateMachine]Disconnectedprocessmessage:10,size:0指定格式可与上面的过滤同时使用。比如：adblogcat-vlongActivityManager:I*:S9.1.4.清空日志adblogcat-c9.2.内核日志命令：adbshelldmesg输出示例：&lt;6&gt;[14201.684016]PM:noirqresumeofdevicescompleteafter0.982msecs&lt;6&gt;[14201.685525]PM:earlyresumeofdevicescompleteafter0.838msecs&lt;6&gt;[14201.753642]PM:resumeofdevicescompleteafter68.106msecs&lt;4&gt;[14201.755954]Restartingtasks...done.&lt;6&gt;[14201.771229]PM:suspendexit2016-08-2813:31:32.679217193UTC&lt;6&gt;[14201.872373]PM:suspendentry2016-08-2813:31:32.780363596UTC&lt;6&gt;[14201.872498]PM:Syncingfilesystems...done.中括号里的[14201.684016]代表内核开始启动后的时间，单位为秒。通过内核日志我们可以做一些事情，比如衡量内核启动时间，在系统启动完毕后的内核日志里找到Freeinginitmemory那一行前面的时间就是。10.查看设备信息10.1.型号命令：adbshellgetpropro.product.model输出示例：Nexus510.2.电池状况命令：adbshelldumpsysbattery输入示例：CurrentBatteryServicestate:ACpowered:falseUSBpowered:trueWirelesspowered:falsestatus:2health:2present:truelevel:44scale:100voltage:3872temperature:280technology:Li-poly其中scale代表最大电量，level代表当前电量。上面的输出表示还剩下44%的电量。10.3.屏幕分辨率命令：adbshellwmsize输出示例：Physicalsize:1080x1920该设备屏幕分辨率为1080px*1920px。如果使用命令修改过，那输出可能是：Physicalsize:1080x1920Overridesize:480x1024表明设备的屏幕分辨率原本是1080px*1920px，当前被修改为480px*1024px。10.4.输出屏幕密度命令：adbshellwmdensity输出示例：Physicaldensity:420该设备屏幕密度为420dpi。如果使用命令修改过，那输出可能是：Physicaldensity:480Overridedensity:160表明设备的屏幕密度原来是480dpi，当前被修改为160dpi。10.5.显示屏参数命令：adbshelldumpsyswindowdisplays输出示例：WINDOWMANAGERDISPLAYCONTENTS(dumpsyswindowdisplays)Display:mDisplayId=0init=1080x1920420dpicur=1080x1920app=1080x1794rng=1080x1017-1810x1731deferred=falselayoutNeeded=false其中mDisplayId为显示屏编号，init是初始分辨率和屏幕密度，app的高度比init里的要小，表示屏幕底部有虚拟按键，高度为1920-1794=126px合42dp。10.6.android_id命令：adbshellsettingsgetsecureandroid_id输出示例：51b6be48bac8c56910.7.IMEI在Android4.4及以下版本可通过如下命令获取IMEI：adb shell dumpsys iphonesubinfo输出示例：PhoneSubscriberInfo:PhoneType=GSMDeviceID=860955027785041其中的DeviceID就是IMEI。而在Android5.0及以上版本里这个命令输出为空，得通过其它方式获取了（需要root权限）：adbshellsuservicecalliphonesubinfo1输出示例：Result:Parcel(0x00000000:000000000000000f0036003800390030&#x27;........8.6.0.9.&#x27;0x00000010:00350035003200300037003700350038&#x27;5.5.0.2.7.7.8.5.&#x27;0x00000020:0034003000000031&#x27;0.4.1...&#x27;)把里面的有效内容提取出来就是IMEI了，比如这里的是860955027785041。参考：adbshelldumpsysiphonesubinfonotworkingsinceAndroid5.0Lollipop10.8.Android系统版本命令：adbshellgetpropro.build.version.release输出示例：5.0.210.9.IP地址每次想知道设备的IP地址的时候都得「设置」-「关于手机」-「状态信息」-「IP地址」很烦对不对？通过adb可以方便地查看。命令：adbshellifconfig|grepMask输出示例：inetaddr:10.130.245.230Mask:255.255.255.252inetaddr:127.0.0.1Mask:255.0.0.0那么10.130.245.230就是设备IP地址。在有的设备上这个命令没有输出，如果设备连着WiFi，可以使用如下命令来查看局域网IP：adbshellifconfigwlan0输出示例：wlan0:ip10.129.160.99mask255.255.240.0flags[upbroadcastrunningmulticast]或wlan0Linkencap:UNSPECinetaddr:10.129.168.57Bcast:10.129.175.255Mask:255.255.240.0inet6addr:fe80::66cc:2eff:fe68:b6b6/64Scope:LinkUPBROADCASTRUNNINGMULTICASTMTU:1500Metric:1RXpackets:496520errors:0dropped:0overruns:0frame:0TXpackets:68215errors:0dropped:0overruns:0carrier:0collisions:0txqueuelen:3000RXbytes:116266821TXbytes:8311736如果以上命令仍然不能得到期望的信息，那可以试试以下命令（部分系统版本里可用）：adbshellnetcfg输出示例：wlan0UP10.129.160.99/200x00001043f8:a9:d0:17:42:4dloUP127.0.0.1/80x0000004900:00:00:00:00:00p2p0UP0.0.0.0/00x00001003fa:a9:d0:17:42:4dsit0DOWN0.0.0.0/00x0000008000:00:00:00:00:00rmnet0DOWN0.0.0.0/00x0000000000:00:00:00:00:00rmnet1DOWN0.0.0.0/00x0000000000:00:00:00:00:00rmnet3DOWN0.0.0.0/00x0000000000:00:00:00:00:00rmnet2DOWN0.0.0.0/00x0000000000:00:00:00:00:00rmnet4DOWN0.0.0.0/00x0000000000:00:00:00:00:00rmnet6DOWN0.0.0.0/00x0000000000:00:00:00:00:00rmnet5DOWN0.0.0.0/00x0000000000:00:00:00:00:00rmnet7DOWN0.0.0.0/00x0000000000:00:00:00:00:00rev_rmnet3DOWN0.0.0.0/00x000010024e:b7:e4:2e:17:58rev_rmnet2DOWN0.0.0.0/00x000010024e:f0:c8:bf:7a:cfrev_rmnet4DOWN0.0.0.0/00x00001002a6:c0:3b:6b:c4:1frev_rmnet6DOWN0.0.0.0/00x0000100266:bb:5d:64:2e:e9rev_rmnet5DOWN0.0.0.0/00x000010020e:1b:eb:b9:23:a0rev_rmnet7DOWN0.0.0.0/00x000010027a:d9:f6:81:40:5arev_rmnet8DOWN0.0.0.0/00x000010024e:e2:a9:bb:d0:1brev_rmnet0DOWN0.0.0.0/00x00001002fe:65:d0:ca:82:a9rev_rmnet1DOWN0.0.0.0/00x00001002da:d8:e8:4f:2e:fe可以看到网络连接名称、启用状态、IP地址和Mac地址等信息。10.10.Mac地址命令：adbshellcat/sys/class/net/wlan0/address输出示例：f8:a9:d0:17:42:4d这查看的是局域网Mac地址，移动网络或其它连接的信息可以通过前面的小节「IP地址」里提到的adbshellnetcfg命令来查看。10.11.CPU信息命令：adbshellcat/proc/cpuinfo输出示例：Processor:ARMv7Processorrev0(v7l)processor:0BogoMIPS:38.40processor:1BogoMIPS:38.40processor:2BogoMIPS:38.40processor:3BogoMIPS:38.40Features:swphalfthumbfastmultvfpedspneonvfpv3tlsvfpv4idivaidivtCPUimplementer:0x51CPUarchitecture:7CPUvariant:0x2CPUpart:0x06fCPUrevision:0Hardware:QualcommMSM8974HAMMERHEAD(FlattenedDeviceTree)Revision:000bSerial:0000000000000000这是Nexus5的CPU信息，我们从输出里可以看到使用的硬件是QualcommMSM8974，processor的编号是0到3，所以它是四核的，采用的架构是ARMv7Processorrev0(v71)。10.12.内存信息命令：adbshellcat/proc/meminfo输出示例：MemTotal:1027424kBMemFree:486564kBBuffers:15224kBCached:72464kBSwapCached:24152kBActive:110572kBInactive:259060kBActive(anon):79176kBInactive(anon):207736kBActive(file):31396kBInactive(file):51324kBUnevictable:3948kBMlocked:0kBHighTotal:409600kBHighFree:132612kBLowTotal:617824kBLowFree:353952kBSwapTotal:262140kBSwapFree:207572kBDirty:0kBWriteback:0kBAnonPages:265324kBMapped:47072kBShmem:1020kBSlab:57372kBSReclaimable:7692kBSUnreclaim:49680kBKernelStack:4512kBPageTables:5912kBNFS_Unstable:0kBBounce:0kBWritebackTmp:0kBCommitLimit:775852kBCommitted_AS:13520632kBVmallocTotal:385024kBVmallocUsed:61004kBVmallocChunk:209668kB其中，MemTotal就是设备的总内存，MemFree是当前空闲内存。10.13.更多硬件与系统属性设备的更多硬件与系统属性可以通过如下命令查看：adbshellcat/system/build.prop这会输出很多信息，包括前面几个小节提到的「型号」和「Android系统版本」等。输出里还包括一些其它有用的信息，它们也可通过adbshellgetprop《属性名》命令单独查看，列举一部分属性如下：属性名含义ro.build.version.sdkSDK版本ro.build.version.releaseAndroid系统版本ro.build.version.security_patchAndroid安全补丁程序级别ro.product.model型号ro.product.brand品牌ro.product.name设备名ro.product.board处理器型号ro.product.cpu.abilistCPU支持的abi列表[节注一]persist.sys.isUsbOtgEnabled是否支持OTGdalvik.vm.heapsize每个应用程序的内存上限ro.sf.lcd_density屏幕密度节注一：一些小厂定制的ROM可能修改过CPU支持的abi列表的属性名，如果用ro.product.cpu.abilist属性名查找不到，可以这样试试：adbshellcat/system/build.prop|grepro.product.cpu.abi示例输出：ro.product.cpu.abi=armeabi-v7aro.product.cpu.abi2=armeabi11.修改设置注：修改设置之后，运行恢复命令有可能显示仍然不太正常，可以运行adbreboot重启设备，或手动重启。修改设置的原理主要是通过settings命令修改/data/data/com.android.providers.settings/databases/settings.db里存放的设置值。11.1.分辨率命令：adbshellwmsize480x1024表示将分辨率修改为480px*1024px。恢复原分辨率命令：adbshellwmsizereset11.2.修改屏幕密度命令：adbshellwmdensity160表示将屏幕密度修改为160dpi。恢复原屏幕密度命令：adbshellwmdensityreset11.3.显示区域命令：adbshellwmoverscan0,0,0,200四个数字分别表示距离左、上、右、下边缘的留白像素，以上命令表示将屏幕底部200px留白。恢复原显示区域命令：adbshellwmoverscanreset11.4.关闭USB调试模式命令：adbshellsettingsputglobaladb_enabled0恢复：用命令恢复不了了，毕竟关闭了USB调试adb就连接不上Android设备了。去设备上手动恢复吧：「设置」-「开发者选项」-「Android调试」。11.5.允许/禁止访问非SDKAPI允许访问非SDKAPI：adbshellsettingsputglobalhidden_api_policy_pre_p_apps1adbshellsettingsputglobalhidden_api_policy_p_apps1禁止访问非SDKAPI：adbshellsettingsdeleteglobalhidden_api_policy_pre_p_appsadbshellsettingsdeleteglobalhidden_api_policy_p_apps不需要设备获得Root权限。命令最后的数字的含义：值含义0禁止检测非SDK接口的调用。该情况下，日志记录功能被禁用，并且令strictmodeAPI，即detectNonSdkApiUsage()无效。不推荐。1仅警告——允许访问所有非SDK接口，但保留日志中的警告信息，可继续使用strickmodeAPI。2禁止调用深灰名单和黑名单中的接口。3禁止调用黑名单中的接口，但允许调用深灰名单中的接口。11.6.状态栏和导航栏的显示隐藏本节所说的相关设置对应Cyanogenmod里的「扩展桌面」。命令：adbshellsettingsputglobalpolicy_control&lt;key-values&gt;&lt;key-values&gt;可由如下几种键及其对应的值组成，格式为&lt;key1&gt;=&lt;value1&gt;:&lt;key2&gt;=&lt;value2&gt;。key含义immersive.full同时隐藏immersive.status隐藏状态栏immersive.navigation隐藏导航栏immersive.preconfirms?这些键对应的值可则如下值用逗号组合：value含义apps所有应用*所有界面packagename指定应用-packagename排除指定应用例如：adbshellsettingsputglobalpolicy_controlimmersive.full=*表示设置在所有界面下都同时隐藏状态栏和导航栏。adbshellsettingsputglobalpolicy_controlimmersive.status=com.package1,com.package2:immersive.navigation=apps,-com.package3表示设置在包名为com.package1和com.package2的应用里隐藏状态栏，在除了包名为com.package3的所有应用里隐藏导航栏。12.实用功能12.1.屏幕截图截图保存到电脑：adbexec-outscreencap-p&gt;sc.png如果adb版本较老，无法使用exec-out命令，这时候建议更新adb版本。无法更新的话可以使用以下麻烦点的办法：先截图保存到设备里：adbshellscreencap-p/sdcard/sc.png然后将png文件导出到电脑：adbpull/sdcard/sc.png可以使用adbshellscreencap-h查看screencap命令的帮助信息，下面是两个有意义的参数及含义：参数含义-p指定保存文件为png格式-ddisplay-id指定截图的显示屏编号（有多显示屏的情况下）实测如果指定文件名以.png结尾时可以省略-p参数；否则需要使用-p参数。如果不指定文件名，截图文件的内容将直接输出到stdout。另外一种一行命令截图并保存到电脑的方法：Linux和Windowsadbshellscreencap-p|sed&quot;s/\\r$//&quot;&gt;sc.pngMacOSXadbshellscreencap-p|gsed&quot;s/\\r$//&quot;&gt;sc.png这个方法需要用到gnused命令，在Linux下直接就有，在Windows下Git安装目录的bin文件夹下也有。如果确实找不到该命令，可以下载sedforWindows并将sed.exe所在文件夹添加到PATH环境变量里。而在Mac下使用系统自带的sed命令会报错：sed:REerror:illegalbytesequence需要安装gnu-sed，然后使用gsed命令：brewinstallgnu-sed12.2.录制屏幕录制屏幕以mp4格式保存到/sdcard：adbshellscreenrecord/sdcard/filename.mp4需要停止时按Ctrl-C，默认录制时间和最长录制时间都是180秒。如果需要导出到电脑：adbpull/sdcard/filename.mp4可以使用adbshellscreenrecord--help查看screenrecord命令的帮助信息，下面是常见参数及含义：参数含义--sizeWIDTHxHEIGHT视频的尺寸，比如1280x720，默认是屏幕分辨率。--bit-rateRATE视频的比特率，默认是4Mbps。--time-limitTIME录制时长，单位秒。--verbose输出更多信息。12.3.重新挂载system分区为可写注：需要root权限/system分区默认挂载为只读，但有些操作比如给Android系统添加命令、删除自带应用等需要对/system进行写操作，所以需要重新挂载它为可读写。步骤：进入shell并切换到root用户权限。命令：adbshellsu查看当前分区挂载情况。命令：mount输出示例：rootfs/rootfsro,relatime00tmpfs/devtmpfsrw,seclabel,nosuid,relatime,mode=75500devpts/dev/ptsdevptsrw,seclabel,relatime,mode=60000proc/procprocrw,relatime00sysfs/syssysfsrw,seclabel,relatime00selinuxfs/sys/fs/selinuxselinuxfsrw,relatime00debugfs/sys/kernel/debugdebugfsrw,relatime00none/vartmpfsrw,seclabel,relatime,mode=770,gid=100000none/acctcgrouprw,relatime,cpuacct00none/sys/fs/cgrouptmpfsrw,seclabel,relatime,mode=750,gid=100000none/sys/fs/cgroup/memorycgrouprw,relatime,memory00tmpfs/mnt/asectmpfsrw,seclabel,relatime,mode=755,gid=100000tmpfs/mnt/obbtmpfsrw,seclabel,relatime,mode=755,gid=100000none/dev/memcgcgrouprw,relatime,memory00none/dev/cpuctlcgrouprw,relatime,cpu00none/sys/fs/cgrouptmpfsrw,seclabel,relatime,mode=750,gid=100000none/sys/fs/cgroup/memorycgrouprw,relatime,memory00none/sys/fs/cgroup/freezercgrouprw,relatime,freezer00/dev/block/platform/msm_sdcc.1/by-name/system/systemext4ro,seclabel,relatime,data=ordered00/dev/block/platform/msm_sdcc.1/by-name/userdata/dataext4rw,seclabel,nosuid,nodev,relatime,noauto_da_alloc,data=ordered00/dev/block/platform/msm_sdcc.1/by-name/cache/cacheext4rw,seclabel,nosuid,nodev,relatime,data=ordered00/dev/block/platform/msm_sdcc.1/by-name/persist/persistext4rw,seclabel,nosuid,nodev,relatime,data=ordered00/dev/block/platform/msm_sdcc.1/by-name/modem/firmwarevfatro,context=u:object_r:firmware_file:s0,relatime,uid=1000,gid=1000,fmask=0337,dmask=0227,codepage=cp437,iocharset=iso8859-1,shortname=lower,errors=remount-ro00/dev/fuse/mnt/shell/emulatedfuserw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other00/dev/fuse/mnt/shell/emulated/0fuserw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other00找到其中我们关注的带/system的那一行：/dev/block/platform/msm_sdcc.1/by-name/system/systemext4ro,seclabel,relatime,data=ordered00重新挂载。命令：mount-oremount,rw-tyaffs2/dev/block/platform/msm_sdcc.1/by-name/system/system这里的/dev/block/platform/msm_sdcc.1/by-name/system就是我们从上一步的输出里得到的文件路径。如果输出没有提示错误的话，操作就成功了，可以对/system下的文件为所欲为了。12.4.查看连接过的WiFi密码注：需要root权限。命令：adbshellsucat/data/misc/wifi/*.conf输出示例：network={ssid=&quot;TP-LINK_9DFC&quot;scan_ssid=1psk=&quot;123456789&quot;key_mgmt=WPA-PSKgroup=CCMPTKIPauth_alg=OPENsim_num=1priority=13893}network={ssid=&quot;TP-LINK_F11E&quot;psk=&quot;987654321&quot;key_mgmt=WPA-PSKsim_num=1priority=17293}ssid即为我们在WLAN设置里看到的名称，psk为密码，key_mgmt为安全加密方式。12.5.设置系统日期和时间注：需要root权限。命令：adbshellsudate-s20160823.131500表示将系统日期和时间更改为2016年08月23日13点15分00秒。12.6.重启手机命令：adbreboot12.7.检测设备是否已root命令：adbshellsu此时命令行提示符是$则表示没有root权限，是#则表示已root。12.8.使用Monkey进行压力测试Monkey可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。简单用法：adbshellmonkey-p&lt;packagename&gt;-v500表示向&lt;packagename&gt;指定的应用程序发送500个伪随机事件。Monkey的详细用法参考官方文档。12.9.开启/关闭WiFi注：需要root权限。有时需要控制设备的WiFi状态，可以用以下指令完成。开启WiFi：adbrootadbshellsvcwifienable关闭WiFi：adbrootadbshellsvcwifidisable若执行成功，输出为空；若未取得root权限执行此命令，将执行失败，输出Killed。13.刷机相关命令13.1.重启到Recovery模式命令：adbrebootrecovery13.2.从Recovery重启到Android命令：adbreboot13.3.重启到Fastboot模式命令：adbrebootbootloader13.4.通过sideload更新系统如果我们下载了Android设备对应的系统更新包到电脑上，那么也可以通过adb来完成更新。以Recovery模式下更新为例：重启到Recovery模式。命令：adbrebootrecovery在设备的Recovery界面上操作进入Applyupdate-ApplyfromADB。注：不同的Recovery菜单可能与此有差异，有的是一级菜单就有ApplyupdatefromADB。通过adb上传和更新系统。命令：adbsideload&lt;path-to-update.zip&gt;14.安全相关命令14.1.启用/禁用SELinux启用SELinuxadbrootadbshellsetenforce1禁用SELinuxadbrootadbshellsetenforce014.2.启用/禁用dm_verity启用dm_verityadbrootadbenable-verity禁用dm_verityadbrootadbdisable-verity15.更多adbshell命令Android系统是基于Linux内核的，所以Linux里的很多命令在Android里也有相同或类似的实现，在adbshell里可以调用。本文档前面的部分内容已经用到了adbshell命令。15.1.查看进程命令：adbshellps输出示例：USERPIDPPIDVSIZERSSWCHANPCNAMEroot108904788ffffffff00000000S/initroot2000ffffffff00000000Skthreadd...u0_a7177795926153874848896ffffffff00000000Scom.sohu.inputmethod.sogou:classicu0_a5879635926156191659568ffffffff00000000Sorg.mazhuang.boottimemeasure...shell87502171064074000000000b6f28340Rps各列含义：列名含义USER所属用户PID进程IDPPID父进程IDNAME进程名15.2.查看实时资源占用情况命令：adbshelltop输出示例：User0%,System6%,IOW0%,IRQ0%User3+Nice0+Sys21+Idle280+IOW0+IRQ0+SIRQ3=307PIDPRCPU%S#THRVSSRSSPCYUIDName876303%R110640K1064Kfgshelltop13103%S10K0Kfgrootdhd_dpc614400%S1151682004K115916Kfgsystemsystem_server13200%S10K0Kfgrootdhd_rxf173100%S620288K788Kfgroot/system/bin/mpdecision21700%S618008K356Kfgshell/sbin/adb...777920%S191538748K48896Kbgu0_a71com.sohu.inputmethod.sogou:classic796300%S181561916K59568Kfgu0_a58org.mazhuang.boottimemeasure...各列含义：列名含义PID进程IDPR优先级CPU%当前瞬间占用CPU百分比S进程状态（R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程）#THR线程数VSSVirtualSetSize虚拟耗用内存（包含共享库占用的内存）RSSResidentSetSize实际使用物理内存（包含共享库占用的内存）PCY调度策略优先级，SP_BACKGROUND/SPFOREGROUNDUID进程所有者的用户IDNAME进程名top命令还支持一些命令行参数，详细用法如下：Usage:top[-mmax_procs][-niterations][-ddelay][-ssort_column][-t][-h]-mnum最多显示多少个进程-nnum刷新多少次后退出-dnum刷新时间间隔（单位秒，默认值5）-scol按某列排序（可用col值：cpu,vss,rss,thr）-t显示线程信息-h显示帮助文档15.3.查看进程UID有两种方案：adbshelldumpsyspackage&lt;packagename&gt;|grepuserId=如：&gt;adbshelldumpsyspackageorg.mazhuang.guanggoo|grepuserId=userId=10394通过ps命令找到对应进程的pid之后adbshellcat/proc/&lt;pid&gt;/status|grepUid如：&gt;adbshellgemini:/$ps|greporg.mazhuang.guanggoou0_a39428635770179581278736SyS_epoll_0000000000Sorg.mazhuang.guanggoogemini:/$cat/proc/28635/status|grepUidUid:10394103941039410394gemini:/$15.4.其它如下是其它常用命令的简单描述，前文已经专门讲过的命令不再额外说明：命令功能cat显示文件内容cd切换目录chmod改变文件的存取模式/访问权限df查看磁盘空间使用情况grep过滤输出kill杀死指定PID的进程ls列举目录内容mount挂载目录的查看和管理mv移动或重命名文件ps查看正在运行的进程rm删除文件top查看进程的资源占用情况"}, "md/monkey.html": {"url": "md/monkey.html", "title": "Monkey", "keywords": "", "body": "Monkey官方文档Monkey是运行在你的模拟器或者设备上一个程序，它能产生伪随机事件，如用户点击，触摸，用户手势（译者：gestures指用户的连续动作导致屏幕的动态显示，Android上可以使用手指拉动屏幕的效果就是gesture）,以及一系列的系统级事件。你可以使用Monkey对你的程序进行压力测试，它可随机产生一些重复的东西。1.概述Monkey是一个命令行程序，你可以跑在模拟器或者设备上。它发送随机的用户和系统事件，可以对你开发的应用程序进行压力测试。Monkey包含一系列的选项，但可以分解为4个主要的类别：基本设置选项，例如设置一些事件。操作限制，如限制测试某一个单独的包。事件类型以及频率。调试选项。当Monkey运行时，它产生的事件被发送给系统。它会监视正在测试系统并寻找三种情况做特殊处理：如果你限制Monkey在一个或者多个包里运行，如果发现程序试图使用其它包，就对其进行阻塞。如果你的程序崩溃或者收到任何无法处理的异常，Monkey就会停止并且报告错误。如果你的程序产生一个程序没有答复的错误，Monkey会停止并报告错误。根据选项的冗长程度，你可以看到Monkey运行时候产生的报告，这个时候事件已经开始产生。2.Monkey的基本用法你可以通过命令或者脚本启动Monkey。因为Monkey运行在模拟器/设备里。你需要在这些环境的shell里启动它，使用时，在每个命令前加上adbshell。基本语法：adbshellmonkey[options]&lt;event-count&gt;没有选项指定时，Monkey安静（没有其它复杂内容）模式启动，然后发送事件给所有安装在你目标机器上的包里。这里有一个有代表性的命令，它能启动你的程序并发送500个随机的事件给程序。adbshellmonkey-pio.github.liushilive.at-v5003.Monkey压力测试实践在手机开发者选项中，选中USB调试确认手机与电脑连接：adbdevices安装测试APP：adbinstallpackage.apk获取APP包名，筛选日志输出：abdlogcat|findstrDisplayedorabdlogcat|grepDisplayedoradblogcat|findstrSTARToradblogcat|grepSTART给指定包打压，延迟500，事件数1000：adbshellmonkey-vvv--throttle500-pio.github.liushilive.at1000&gt;monkey.txt2&gt;&amp;1分析日志程序无响应的情况：搜索关键字ANR查看traces.txt文件：adbshellls-l/data/anr/提取traces.txt文件：adbpull/data/anr/traces.txt部分国产过度定制机器可能无法正常导出traces.txt文件，会提示PermissionDenied或文件不存在等信息亦可通过adbbugreport完成崩溃、闪退的情况1：搜索关键字CRASH崩溃、闪退的情况2：搜索关键字Exception内存溢出的情况：搜索关键字OOM测试成功的情况：搜索关键字Monkeyfinished重现：adbshellmonkey-s1546458727792-vvv--throttle500-pio.github.liushilive.at1000&gt;monkey.txt2&gt;&amp;14.日志解析adbshellmonkey-vvv-pio.github.liushilive.at--pct-touch1--pct-motion2--pct-pinchzoom3--pct-trackball4--pct-rotation5--pct-permission6--pct-nav7--pct-majornav8--pct-syskeys9--pct-appswitch10--pct-flip11--pct-anyevent34--throttle100100&gt;1.txt2&gt;&amp;14.1.各事件的百分比--pct-touch0：触摸事件百分比（触摸事件是一个在屏幕单一位置的按下-抬起事件）--pct-motion1：手势事件（手势事件是由一个在屏幕某处的按下事件、一系列的伪随机移动、一个抬起事件组成）即一个滑动操作，但是是直线的，不能拐弯--pct-pinchzoom2：二指缩放事件，放大缩小手势操作--pct-trackball3：轨迹事件--pct-rotation4：屏幕旋转事件--pct-permission5:权限许可事件--pct-nav6：基本导航事件--pct-majornav7：主要导航事件--pct-syskeys8：系统按键事件--pct-appswitch9：启动Activity事件--pct-flip10：键盘事件--pct-anyevent11：其他类型事件#随机种子数，执行事件数量:Monkey:seed=1545952923355count=100#运行的应用列表:AllowPackage:io.github.liushilive.at#Category包含：LAUNCHER与MONKEY:IncludeCategory:android.intent.category.LAUNCHER:IncludeCategory:android.intent.category.MONKEY#各事件的百分比//Eventpercentages://0:1.0%//1:2.0%//2:3.0%//3:4.0%//4:5.0%//5:6.0%//6:7.0%//7:8.0%//8:9.0%//9:10.0%//10:11.0%//11:34.0%#执行的事件流信息#启动APP事件:Switch:#Intent;action=android.intent.action.MAIN;category=android.intent.category.LAUNCHER;launchFlags=0x10200000;component=cc.liushi.testapp/.HomeScreenActivity;end//AllowingstartofIntent{act=android.intent.action.MAINcat=[android.intent.category.LAUNCHER]cmp=cc.liushi.testapp/.HomeScreenActivity}inpackagecc.liushi.testapp#点击事件:SendingTouch(ACTION_DOWN):0:(698.0,306.0):SendingTouch(ACTION_UP):0:(703.8239,325.90808)....:SendingTouch(ACTION_UP):0:(1184.9438,428.81464):SendingTrackball(ACTION_MOVE):0:(4.0,0.0)#异常信息//CRASH:cc.liushi.testapp(pid2901)//ShortMsg:java.lang.ArithmeticException//LongMsg:java.lang.ArithmeticException:dividebyzero#机型和系统信息//BuildLabel:Android/sdk_phone_x86/generic_x86:7.0/NYC/4174735:userdebug/test-keys//BuildChangelist:4174735//BuildTime:1499888857000#crash详细信息//java.lang.ArithmeticException:dividebyzero//atandroid.widget.SimpleMonthView.findClosestColumn(SimpleMonthView.java:550)#Monkey执行结果信息**Monkeyabortedduetoerror.Eventsinjected:437:Sendingrotationdegree=0,persist=false:Dropped:keys=1pointers=0trackballs=0flips=0rotations=0##Networkstats:elapsedtime=9984ms(0msmobile,0mswifi,9984msnotconnected)**Systemappearstohavecrashedatevent437of1000usingseed15153930570755.Android平台Monkey测试标准系统稳定性测试测试样机数量：5-10台运行时间：25小时测试要求：运行时间&gt;20小时样机运行时间按从小到大排序，取中间2个值，计算平均时间，要求时间中间值平均为24小时以上两个条件均满足则认为通过测试（运行过程中无异常）单个APK运行稳定性测试测试样机数量：5-10台运行时间：25小时测试要求：平均运行时间至少为20小时（&gt;380000个ENVENT）,测试过程中无ANR、JAVACRASH、NativeCrash、WindowLeak、ExceedsVMbudgetcount等任何异常6.猴运行业内标准最终发布前，Monkey跑完的总次数应为25W次，其结果里不允许有nullPointException出现。7.命令选项参考下面的表格里列出了所有包含在Monkey命令行的参数：类别选项描述通用--help打印使用向导。-v每个-v在命令里都会增加日志级别，0级别（默认）在启动、测试结束、最终结果之外只提供很少的信息，1级别在运行时提供更详细的测试信息，例如每个发往你活动的事件。2级别提供更加详细的设置信息，如一个活动是否选中被测试。事件-s&lt;seed&gt;随机数字产生器的种子。如果你用同样的种子运行Monkey，它将会产生相同的事件。--throttle&lt;milliseconds&gt;在事件中插入一个固定的延迟。一般使用这个命令去延缓Monkey程序。如果没有指定，Monkey产生的事件将没有延迟并尽可能快的发送。--pct-touch&lt;percent&gt;调整触摸事件的比例。（触摸事件是一个在屏幕上单点按下的事件）--pct-motion&lt;percent&gt;调整手势事件的比例。（手势事件由一系列屏幕上的按下事件组成，一系列的伪随机移动和一个松开事件）--pct-trackball&lt;percent&gt;调整跟踪球事件（跟踪球由一个或多个随机移动事件组成，有时还会接一个单击事件）--pct-nav&lt;percent&gt;调整”基本”导航事件。（导航事件由上/下/左/右组成，这些事件由输入设备输入）--pct-majornav&lt;percent&gt;调整“主要”的导航事件的比例。（有些导航事件将会在你的UI里导致一些动作，例如在5向键里的中间，退出键，或者菜单键）--pct-syskeys&lt;percent&gt;调整“系统”事件的比例。（有些键通常是系统保留的，如主界面，退出，电话，结束通话，或者声音调节）--pct-appswitch&lt;percent&gt;调整活动被运行的比例。在一些随机的间隔里，Monkey会调用一个startActivity（）的调用，以最大程序得覆盖你包里的所有的活动。--pct-anyevent&lt;percent&gt;调整其他类型事件的比例。这包含所有其他的事件，如用户按键，其他设备上不常用的的按键，等等。限制-p&lt;allowed-package-name&gt;如果你指定一个或者多个包，Monkey程序仅仅允许系统访问这些包里的活动。如果你的应用程序需要进入其他包的活动（例如选择一个联系人），你也需要指定这个包。如果你不指定任何包，Monkey将允许系统运行所有包里活动。指定多个包，可以多次使用-p选项——一个—每个p选项选一个包。-c&lt;main-category&gt;如果你指定一个或多个类别（category），Monkey将仅仅允许系统访问这些指定类别里的一个活动。如果你不指定任何类别，Monkey将选择Intel.CATEGORY_LAUNCHER或者CATEGORY_MONKEY列出的活动。如果要选择多个类别，多次使用-c选项——每个-c选一个类别。调试--dbg-no-events当被指定时，Monkey将在测试活动里执行初始化运行程序，但还没有产生任何事件。最好的是集成-v，能使一个或多个包被限制，这样一个非0的控制能保证Monkey程序运行30秒或更长时间。这提供一个环境，你可以监视你的应用程序调用的包的所有变化。--hprof如果设置这个选项，系统会在Monkey事件序列前后都立即产生程序分析报告。这将会产生巨大的（~5M）数据文件，所以请谨慎使用。--ignore-crashes通常情况下，Monkey会因为程序崩溃或者遇到一些无法处理的异常而停止，但你指定了这个选项，Monkey会继续发事件给系统，直到事件计数器结束。--ignore-timeouts通常情况下，Monkey会因为程序超时而停止，例如程序弹出“应用程序没有答复”的对话框。如果你指定了这个选项，Monkey会继续发事件给系统，直到事件计数器结束。--ignore-security-exceptions通常情况下，Monkey会因为一些权限错误而停止，例如，它试图运行一个需要特殊权限的活动。如果指定这个选项，Monkey会继续发送事件给系统，直到事件计数器结束。--kill-process-after-error通常情况下，Monkey会因为错误停止，应用程序失败但会并停留在运行状态，当这个条件设置后，它会发消息给系统在错误发生的地方停止进程。评注：在程序正常（成功）的完成，运行的程序不会停止，设备会收到结束事件而停留在最后的状态上。--monitor-native-crashes监视并报告Android系统代码里的崩溃事件。如果设置了--kill-process-after-error,系统将会停止。--wait-dbg停止Monkey直到调试工具连接上程序。"}}